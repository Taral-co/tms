from datetime import datetime
from typing import List, Optional
from uuid import UUID

from pydantic import BaseModel


class KBArticle(BaseModel):
    """Knowledge base article model."""
    id: UUID
    tenant_id: UUID
    project_id: UUID
    category_id: Optional[UUID] = None
    title: str
    content: str
    summary: Optional[str] = None
    slug: str
    tags: List[str] = []
    keywords: List[str] = []
    status: str = "draft"
    is_public: bool = True
    author_id: Optional[UUID] = None
    view_count: int = 0
    helpful_count: int = 0
    not_helpful_count: int = 0
    published_at: Optional[datetime] = None
    created_at: datetime
    updated_at: datetime


class KBSearchRequest(BaseModel):
    """Knowledge base search request."""
    query: str
    tenant_id: UUID
    project_id: UUID
    categories: List[str] = []
    tags: List[str] = []
    status: List[str] = []
    limit: int = 10
    offset: int = 0
    sort_by: str = "relevance"
    sort_order: str = "desc"
    public_only: bool = False


class KBSearchResult(BaseModel):
    """Knowledge base search result."""
    id: UUID
    type: str
    title: str
    content: str
    summary: Optional[str] = None
    score: float
    rank: int
    snippet: str
    url: Optional[str] = None
    tags: List[str] = []
    keywords: List[str] = []
    category_name: Optional[str] = None
    author_name: Optional[str] = None
    view_count: int = 0
    helpful_count: int = 0
    created_at: datetime
    updated_at: datetime
    published_at: Optional[datetime] = None


class KBSearchResponse(BaseModel):
    """Knowledge base search response."""
    results: List[KBSearchResult]
    total: int
    query: str
    took: int
    page: int
    per_page: int
    max_score: float
    suggestion: Optional[str] = None


class QuestionRequest(BaseModel):
    """Question request model."""
    question: str
    tenant_id: UUID
    project_id: UUID
    context: Optional[str] = None
    chat_session_id: Optional[UUID] = None
    ticket_id: Optional[UUID] = None


class AnswerResponse(BaseModel):
    """Answer response model."""
    question: str
    answer: str
    confidence: float
    sources: List[KBSearchResult] = []
    has_answer: bool
    suggestions: List[str] = []
    reasoning: Optional[str] = None


class EmbeddingRequest(BaseModel):
    """Embedding request model."""
    text: str
    model: Optional[str] = None


class EmbeddingResponse(BaseModel):
    """Embedding response model."""
    embedding: List[float]
    model: str
    dimension: int


class AutoGenerateRequest(BaseModel):
    """Auto-generate knowledge base request."""
    tenant_id: UUID
    project_id: UUID
    source_type: str  # "ticket", "email", "chat"
    source_ids: Optional[List[UUID]] = None
    date_from: Optional[datetime] = None
    date_to: Optional[datetime] = None
    min_confidence: float = 0.7
    include_resolved: bool = True


class AutoGeneratedEntry(BaseModel):
    """Auto-generated knowledge base entry."""
    title: str
    content: str
    summary: Optional[str] = None
    keywords: List[str] = []
    confidence_score: float
    source_type: str
    source_id: UUID
    reasoning: Optional[str] = None


class SimilarityRequest(BaseModel):
    """Similarity search request."""
    text: str
    tenant_id: UUID
    project_id: UUID
    limit: int = 5
    threshold: float = 0.7


class SimilarityResult(BaseModel):
    """Similarity search result."""
    id: UUID
    title: str
    content: str
    score: float
    type: str
