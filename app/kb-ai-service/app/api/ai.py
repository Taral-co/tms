from fastapi import APIRouter, HTTPException, Request
from typing import List

from app.models import (
    QuestionRequest,
    AnswerResponse,
    AutoGenerateRequest,
    AutoGeneratedEntry
)

router = APIRouter()


@router.post("/answer", response_model=AnswerResponse)
async def answer_question(request: QuestionRequest, req: Request):
    """Answer a question using AI and knowledge base."""
    try:
        ai_service = req.app.state.ai_service
        search_service = req.app.state.search_service
        
        # First, search for relevant articles
        from app.models import KBSearchRequest
        search_req = KBSearchRequest(
            query=request.question,
            tenant_id=request.tenant_id,
            project_id=request.project_id,
            limit=5
        )
        
        # Get relevant articles
        articles = await search_service.search_articles(search_req)
        
        # Generate answer using AI
        answer = await ai_service.answer_question(
            question=request.question,
            context_articles=articles,
            additional_context=request.context
        )
        
        return answer
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))


@router.post("/summarize")
async def generate_summary(title: str, content: str, req: Request):
    """Generate a summary for content using AI."""
    try:
        ai_service = req.app.state.ai_service
        summary = await ai_service.generate_article_summary(title, content)
        return {"summary": summary}
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))


@router.post("/keywords")
async def suggest_keywords(title: str, content: str, req: Request):
    """Suggest keywords for content using AI."""
    try:
        ai_service = req.app.state.ai_service
        keywords = await ai_service.suggest_keywords(title, content)
        return {"keywords": keywords}
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))


@router.post("/improve")
async def improve_content(content: str, feedback: str, req: Request):
    """Improve content based on feedback using AI."""
    try:
        ai_service = req.app.state.ai_service
        improved = await ai_service.improve_content(content, feedback)
        return {"improved_content": improved}
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))


@router.post("/generate", response_model=List[AutoGeneratedEntry])
async def auto_generate_articles(request: AutoGenerateRequest, req: Request):
    """Auto-generate knowledge base articles from tickets/emails/chats."""
    try:
        # This would analyze tickets/emails/chats and generate KB entries
        # For now, return empty list - implement based on your data sources
        return []
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))
