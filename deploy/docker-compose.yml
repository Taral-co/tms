version: '3.8'

services:
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: tms-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: admin
    ports:
      - "5050:80"
    networks:
      - tms-network

  # Database
  postgres:
    image: postgres:15
    container_name: tms-postgres
    environment:
      POSTGRES_DB: tms
      POSTGRES_USER: tms
      POSTGRES_PASSWORD: tms123
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - tms-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U tms -d tms"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and queues
  redis:
    image: redis:7-alpine
    container_name: tms-redis
    ports:
      - "6380:6379"
    volumes:
      - redis_data:/data
    networks:
      - tms-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MinIO for object storage
  minio:
    image: minio/minio:latest
    container_name: tms-minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    networks:
      - tms-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Mailhog for email testing
  mailhog:
    image: mailhog/mailhog:latest
    container_name: tms-mailhog
    ports:
      - "1025:1025"  # SMTP
      - "8025:8025"  # Web UI
    networks:
      - tms-network

  # Guerrilla Mail Server for Email-to-Ticket Processing
  guerrilla-mail:
    build:
      context: ../app/email-server
      dockerfile: Dockerfile
    container_name: tms-guerrilla-mail
    ports:
      - "25:25"     # SMTP port for receiving emails
      - "587:25"    # Alternative submission port
    environment:
      - MAIL_DOMAIN=${MAIL_DOMAIN:-yourmailserver.com}
      - TICKET_API_URL=http://backend:8080/v1/public/email-to-ticket
      - LISTEN_INTERFACE=0.0.0.0:25
      - MAX_MESSAGE_SIZE=${MAX_MESSAGE_SIZE:-1048576}
    networks:
      - tms-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "25"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.25'

  # Backend API
  backend:
    build:
      context: ../app/backend
      dockerfile: Dockerfile
    container_name: tms-backend
    environment:
      - PORT=8080
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=tms
      - DB_USER=tms
      - DB_PASSWORD=tms123
      - REDIS_URL=redis://redis:6379
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin123
      - SMTP_HOST=mailhog
      - SMTP_PORT=1025
      - JWT_SECRET=your-jwt-secret-change-in-production
      - CORS_ORIGINS=http://localhost:5173,http://localhost:5174
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    volumes:
      - ../app/backend:/app
    networks:
      - tms-network
    restart: unless-stopped

  # Agent Console Frontend
  agent-console:
    build:
      context: ../app/frontend/agent-console
      dockerfile: Dockerfile
    container_name: tms-agent-console
    environment:
      - VITE_API_URL=http://localhost:8080
    ports:
      - "5173:5173"
    volumes:
      - ../app/frontend/agent-console:/app
      - /app/node_modules
    networks:
      - tms-network
    restart: unless-stopped

  # Public View Frontend
  public-view:
    build:
      context: ../app/frontend/public-view
      dockerfile: Dockerfile
    container_name: tms-public-view
    environment:
      - VITE_API_URL=http://localhost:8080
    ports:
      - "5174:5174"
    volumes:
      - ../app/frontend/public-view:/app
      - /app/node_modules
    networks:
      - tms-network
    restart: unless-stopped

  # Elasticsearch for advanced search capabilities
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: tms-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - xpack.security.enrollment.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - tms-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # Ollama for local AI/LLM capabilities
  ollama:
    image: ollama/ollama:latest
    container_name: tms-ollama
    environment:
      - OLLAMA_HOST=0.0.0.0
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    networks:
      - tms-network
    restart: unless-stopped
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
    # Remove GPU requirement for systems without GPU
    # deploy:
    #   resources:
    #     limits:
    #       memory: 4G

  # Vector Database for embeddings (Qdrant)
  qdrant:
    image: qdrant/qdrant:latest
    container_name: tms-qdrant
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant_data:/qdrant/storage
    networks:
      - tms-network
    restart: unless-stopped

  # Knowledge Base AI Service
  kb-ai-service:
    build:
      context: ../app/kb-ai-service
      dockerfile: Dockerfile
    container_name: tms-kb-ai-service
    environment:
      - PORT=8081
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=tms
      - DB_USER=tms
      - DB_PASSWORD=tms123
      - REDIS_URL=redis://redis:6379
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - OLLAMA_URL=http://ollama:11434
      - QDRANT_URL=http://qdrant:6333
      - EMBEDDING_MODEL=all-minilm-l6-v2
      - LLM_MODEL=llama2:7b
    ports:
      - "8081:8081"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    volumes:
      - ../app/kb-ai-service:/app
    networks:
      - tms-network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  minio_data:
  elasticsearch_data:
  ollama_data:
  qdrant_data:

networks:
  tms-network:
    driver: bridge
